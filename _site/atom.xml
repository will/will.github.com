<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tom Preston-Werner</title>
 <link href="http://tom.preston-werner.com/atom.xml" rel="self"/>
 <link href="http://tom.preston-werner.com/"/>
 <updated>2010-12-24T18:02:25-06:00</updated>
 <id>http://tom.preston-werner.com/</id>
 <author>
   <name>Tom Preston-Werner</name>
   <email>tom@mojombo.com</email>
 </author>

 
 <entry>
   <title>Some Talks</title>
   <link href="http://tom.preston-werner.com/2010/10/10/some-talks.html"/>
   <updated>2010-10-10T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2010/10/10/some-talks</id>
   <content type="html">&lt;p&gt;I gave a few talks and just realized I never put them up anywhere.
The first talk is one I gave as an introduction to BDD using rspec to some students at uiuc.
It seems like giving an &quot;intro to bdd&quot; talk is something everyone has to eventually do ;)&lt;/p&gt;

&lt;iframe src=&quot;http://player.vimeo.com/video/11444008&quot; width=&quot;400&quot; height=&quot;300&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;


&lt;p&gt;&lt;a href=&quot;http://vimeo.com/11444008&quot;&gt;Intro to Behavior Driven Design&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/willl&quot;&gt;will l&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;Second is a talk I gave at pecha kucha, which is a lot like ignite. Same auto advancing format, just a different amount of slides and time per slide.&lt;/p&gt;

&lt;iframe src=&quot;http://player.vimeo.com/video/13806419&quot; width=&quot;400&quot; height=&quot;225&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;


&lt;p&gt;&lt;a href=&quot;http://vimeo.com/13806419&quot;&gt;me @ pecha kucha&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/willl&quot;&gt;will l&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Auto Merge Gemfile.lock</title>
   <link href="http://tom.preston-werner.com/2010/07/16/auto-mege-gemfile-lock.html"/>
   <updated>2010-07-16T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2010/07/16/auto-mege-gemfile-lock</id>
   <content type="html">&lt;div class=&quot;right image&quot;&gt;
  &lt;img src=&quot;/images/lock.jpg&quot; /&gt;
&lt;/div&gt;


&lt;p&gt;Here's the problem: you're working on a topic branch and add a gem to your Gemfile, and someone else has added a gem to master before you're done. When you go to rebase, every single one of your commits is going to have a conflict with &lt;code&gt;Gemfile.lock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All you have to do is run &lt;code&gt;bundle lock&lt;/code&gt; to get bundler to relock then add that and continue your rebase. But that's so damn tedious.&lt;/p&gt;

&lt;p&gt;Good news! I just figured out how to tell git how to do that for you, and it works great. There are two files you have to edit.&lt;/p&gt;

&lt;h3&gt;gitconfig&lt;/h3&gt;

&lt;p&gt;First is your &lt;code&gt;~/.gitconfig&lt;/code&gt; file. Here we're going to give it a new merge strategy, one that will just relock the gemfile. Add this to the end:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[merge &quot;gemfilelock&quot;]
  name = relocks the gemfile.lock
  driver = bundle lock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The driver is what git will use to try and fix the conflict. Its exit status will tell git if the merge was successful or not. Here all we're doing is having bundler relock. You can see it in action in &lt;a href=&quot;http://github.com/will/dotfiles/commit/4ed4930c61df795b7fbc9732d3c6463164ebb43f&quot;&gt;my dotfiles&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;gitattributes&lt;/h3&gt;

&lt;p&gt;Next up, we have to tell git to use our new strategy for &lt;code&gt;Gemfile.lock&lt;/code&gt;, and we do that with &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/gitattributes.html&quot;&gt;gitattributes&lt;/a&gt;. You can either put this in &lt;code&gt;project/.git/info/attributes&lt;/code&gt; or &lt;code&gt;project/.gitattributes&lt;/code&gt;. I did the .git directory one myself, but it doesn't matter. We just need one line in this file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gemfile.lock merge=gemfilelock
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;results&lt;/h3&gt;

&lt;p&gt;And that's it! Here's what happen when you rebase now&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;First, rewinding head to replay your work on top of it...
Applying: commit one
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Your bundle is already locked, relocking.
&lt;span style=&quot;color: green;&quot;&gt;Your bundle is now locked. Use `bundle show [gemname]` to list the gems in the environment.&lt;/span&gt;
Auto-merging Gemfile
Auto-merging Gemfile.lock
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now that, if I may say so myself, is really awesome! (image credit &lt;a href=&quot;http://www.flickr.com/photos/maistora/3237164755/&quot;&gt;malstora&lt;/a&gt;)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rails Integration Testing Stack for Winners</title>
   <link href="http://tom.preston-werner.com/2010/05/01/rails_integration_stack_for_winners.html"/>
   <updated>2010-05-01T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2010/05/01/rails_integration_stack_for_winners</id>
   <content type="html">&lt;p&gt;Full-stack, acceptance, integration, or whatever-you-want-to-call-it testing should be a large part of your test suite. I'm not going to waste time trying to convince anyone of this, since there are probably a million other blog posts doing that (and probably twice as many arguing the different names).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/finish.jpg&quot; alt=&quot;finish line&quot; /&gt;
Rather, I'll show you the hands-down best way to do it with what's out there right now. Follow this setup and you too can be a winner. I've written &lt;a href=&quot;/2009/06/celerity.html&quot;&gt;a bit&lt;/a&gt; about this earlier, but things have gotten better since then.&lt;/p&gt;

&lt;p&gt;Currently, while Rails 3 is close, it's not out yet, so I'm ignoring it for this post. Latest is 2.3.5. Here we go.&lt;/p&gt;

&lt;h2&gt;Cucumber&lt;/h2&gt;

&lt;p&gt;Cucumber drives everything. It's awesome, and you should have already heard of it. Everyone uses it. It's surpassed the vegetable on google for the top result.&lt;/p&gt;

&lt;p&gt;It ships with webrat, but &lt;em&gt;don't use webrat&lt;/em&gt;. It's neat and probably helped a lot to get cucumber popular. But it can't do javascript. And what site doesn't have JS these days. You need to be testing that too, you know.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cukes.info/&quot;&gt;Cucumber &amp;mdash; cukes.info&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Capybara&lt;/h2&gt;

&lt;p&gt;This is what you use instead of webrat. It lets you use a bunch of web drivers behind it. Out out of the box it supports selenium (ugh) and Celerity/Culerity (awesome). Before getting cucumber to work with Capybara was a little hacky, but they're best friends now. Use this.&lt;/p&gt;

&lt;p&gt;You tag the stories that need javascript with @javascript, and it'll fire up culerity when it needs to. That's all you have to do. It's fantastic.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/jnicklas/capybara&quot;&gt;Capybara &amp;mdash; github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Culerity&lt;/h2&gt;

&lt;p&gt;This provides a nice bridge between your MRI Ruby rails app, and the jruby-only gem Celerity. It'll fire off a separate server running in the test environment, then start up a jruby process for celerity.&lt;/p&gt;

&lt;p&gt;Now this one can be a bit of a pain to set up, since you need to install jruby and then celerity and make sure that's all working and wired up. A nice alternative is &lt;a href=&quot;http://github.com/fletcherm/culerity/&quot;&gt;Matt Fletcher's fork&lt;/a&gt;, which bundles all that into the gem itself so you don't have to worry about it.&lt;/p&gt;

&lt;p&gt;There can be some problems with gem bundler, though. The gist of it is that you have to use JRuby v1.3.1 or earlier. I wrote more details about the bug on the  &lt;a href=&quot;http://groups.google.com/group/culerity-dev/browse_thread/thread/3c1ed5f38d540ad1&quot;&gt;mailing list&lt;/a&gt;. It looks like &lt;em&gt;just yesterday&lt;/em&gt; Matt updated his fork to fix this, so hurray!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/langalex/culerity&quot;&gt;Culerity &amp;mdash; github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Celerity&lt;/h2&gt;

&lt;p&gt;This is what's actually doing the work. It's a JRuby-only gem, since it uses the Java &lt;a href=&quot;http://httpunit.sourceforge.net/&quot;&gt;HttpUnit&lt;/a&gt; headless web browser. This is a complete web browser, with its own javascript engine, except it is just controlled though some API, and doesn't have a display.&lt;/p&gt;

&lt;p&gt;Selenium was cool for it's time. Watir too, I guess, though I never used it. But relying on a real browser sucks. It's really slow. You have to worry about browser upgrades breaking the tenuous control. And it makes your CI server a hundred times more complicated than it has to be. Fuck that, when you can use Celerity which is awesome.&lt;/p&gt;

&lt;p&gt;For some reason I can't quite remember, I had to stay on version 0.7.6. If you're having weird problems try that version. Of course, if you're using Matt's culerity fork like I suggested, you don't have to worry about it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://celerity.rubyforge.org/&quot;&gt;Celerity&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;picture credit: &lt;a href=&quot;http://www.flickr.com/photos/philon/2477878611/&quot;&gt;philo nordlund&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Red Dirt Ruby Conference</title>
   <link href="http://tom.preston-werner.com/2010/04/22/speaking_at_rdrc.html"/>
   <updated>2010-04-22T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2010/04/22/speaking_at_rdrc</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/rdrc.png&quot; alt=&quot;logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I'll be speaking about using CouchDB from ruby at the upcoming &lt;a href=&quot;http://reddirtrubyconf.com/&quot;&gt;Red Dirt Ruby Conference&lt;/a&gt; on May 6th in Oklahoma City. The format is new, at least to me. There are four themes: Ruby, Rails 3, NoSQL, and Servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://reddirtrubyconf.com/presentation/detail/31&quot;&gt;My talk&lt;/a&gt; is in the NOSQL theme and it will give you everything you need to get started using CouchDB from Ruby. The rest of the lineup looks amazing, and I'm really looking forward to it.&lt;/p&gt;

&lt;p&gt;I'll be sure to post slides and such up here when I have them. Hope to see you in Oklahoma!&lt;/p&gt;

&lt;p&gt;Update: And here are my slides:&lt;/p&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_3996196&quot;&gt;&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/leinweber/couchdb-red-dirt-ruby-conference&quot; title=&quot;CouchDB @ red dirt ruby conference&quot;&gt;CouchDB @ red dirt ruby conference&lt;/a&gt;&lt;/strong&gt;&lt;object id=&quot;__sse3996196&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=2010-05-06couchdbrubyandyounewcolor-100506112253-phpapp02&amp;rel=0&amp;stripped_title=couchdb-red-dirt-ruby-conference&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed name=&quot;__sse3996196&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=2010-05-06couchdbrubyandyounewcolor-100506112253-phpapp02&amp;rel=0&amp;stripped_title=couchdb-red-dirt-ruby-conference&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>CI Radiator in Javascript</title>
   <link href="http://tom.preston-werner.com/2010/03/15/ci_radiator.html"/>
   <updated>2010-03-15T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2010/03/15/ci_radiator</id>
   <content type="html">&lt;p&gt;Continuous integration is a must. But if your team can't easily see the current build status, you loose a major benefit of CI: short feedback loops. The longer it takes to notice that the build is broken, the worse off you'll be.&lt;/p&gt;

&lt;p&gt;I wrote really simple radiator that shows the current build state and the SHA of the associated commit just using HTML and JavaScript. We have it sitting up in the corner of the room, and it's been invaluable over the last few months. I even made a video showing it off, but never got around to really sharing it. Check it out:&lt;/p&gt;

&lt;p&gt;&lt;object width=&quot;500&quot; height=&quot;375&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=8851542&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=0&amp;amp;show_portrait=0&amp;amp;color=ff0179&amp;amp;fullscreen=1&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=8851542&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=0&amp;amp;show_portrait=0&amp;amp;color=ff0179&amp;amp;fullscreen=1&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;500&quot; height=&quot;375&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;We use Hudson for CI, and if you're using it too, you can just go ahead and use this html yourself with a few modifications. Enjoy!&lt;/p&gt;

&lt;script src=&quot;http://gist.github.com/281402.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Why we're not on Ruby1.9</title>
   <link href="http://tom.preston-werner.com/2009/09/11/ruby19.html"/>
   <updated>2009-09-11T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2009/09/11/ruby19</id>
   <content type="html">&lt;p&gt;It's been out for a while now, but as a community we just aren't using it. Why?&lt;/p&gt;

&lt;p&gt;There have been technical excuses, namely broken gems. It's probably true that this is holding people back from upgrading, but gems can be fixed if we actually cared. So it's not a technical reason.&lt;/p&gt;

&lt;p&gt;I've also seen marketing excuses. Odd numbers are generally for developmental releases and even for production. Yeah that's true in some places, but this can't be that big of a hurdle. The other argument is that it should have been 2.0. This holds a bit more weight as a whole number bump would probably make this seem like an important update. Which it is.&lt;/p&gt;

&lt;p&gt;We've normally been quick to adopt new practices and tech. Remember when REST was introduced? About a year later, we were all building restful apps and were annoyed when we had to interact with old, non-rest apis. Or the near instantaneous mass migration to git. What was different in those cases?&lt;/p&gt;

&lt;h3&gt;Evangelists&lt;/h3&gt;

&lt;p&gt;The guys with the well read blogs, the vocal consultancies, the regular conference speakers. In the past they said, &quot;Hey I'm using this, it's great, you should too&quot;. And we did. That hasn't happened this time.&lt;/p&gt;

&lt;p&gt;We need I've-switched-to-1.9 posts and talks. Hell, lie about it, if it'll get the community to upgrade. There'll be problems with gems, sure, but that period will be short. We'll make it through.&lt;/p&gt;

&lt;p&gt;I'll end by doing my part: I've switched to ruby 1.9.1, it's great, and you should too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Quick Guide to Celerity</title>
   <link href="http://tom.preston-werner.com/2009/06/09/celerity.html"/>
   <updated>2009-06-09T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2009/06/09/celerity</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ll assume you already know and love &lt;a href=&quot;http://wiki.github.com/aslakhellesoy/cucumber&quot;&gt;Cucumber&lt;/a&gt; and are using it. I&amp;#8217;ll go even farther and assume you&amp;#8217;re writing your steps in &lt;a href=&quot;http://gitrdoc.com/brynary/webrat/tree/master/&quot;&gt;Webrat&lt;/a&gt; since that&amp;#8217;s what cucumber ships with. Now, I really like webrat. It&amp;#8217;s a wonderful &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; and fun to work with, but it does have one problem: no javascript, no ajax.&lt;/p&gt;
&lt;h3&gt;Enter Celerity&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://celerity.rubyforge.org/&quot;&gt;Celerity&lt;/a&gt; is a headless browser for jruby that can do javascript. Now you can run your cucumber features that need to do ajax calls, and stay on the command line or CI box. It gets better though. The &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; is compatible with Watir, so you have the option of driving a real browser at any time. It&amp;#8217;s not as expressive as webrat, but since you reusing cucumber steps is easy, it&amp;#8217;s not a huge deal.&lt;/p&gt;
&lt;h3&gt;Don&amp;#8217;t want jruby?&lt;/h3&gt;
&lt;p&gt;If you don&amp;#8217;t want to run your whole app in jruby, checkout &lt;a href=&quot;http://github.com/langalex/culerity/tree/master&quot;&gt;langalex-culerity&lt;/a&gt;. It&amp;#8217;s a gem that will let you drive celerity from mri. It also comes with a &lt;code&gt;common_celerity.rb&lt;/code&gt; file to replace most of your &lt;code&gt;webrat_steps&lt;/code&gt;. We ran into a few steps that were missing or worked a little differently, but porting over didn&amp;#8217;t take long at all.&lt;/p&gt;
&lt;h3&gt;That&amp;#8217;s it!&lt;/h3&gt;
&lt;p&gt;Honestly, there&amp;#8217;s not much to getting it working, so I&amp;#8217;ve skipped doing a detailed step-by-step style guide. The documentation on getting jruby, celerity, and culerity installed is all you need. There weren&amp;#8217;t any surprises. If your app has uses a fair amount of javascript, it&amp;#8217;s worth your time to check this out.&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>Acts as Conference Talk</title>
   <link href="http://tom.preston-werner.com/2009/02/09/aac-talk.html"/>
   <updated>2009-02-09T00:00:00-06:00</updated>
   <id>http://tom.preston-werner.com/2009/02/09/aac-talk</id>
   <content type="html">&lt;p&gt;I just got back from &lt;a href=&quot;http://actsasconference.com&quot;&gt;acts_as_conference&lt;/a&gt; and it was great! I promised a few people that I&amp;#8217;d put up my slides so here they are:&lt;/p&gt;
&lt;div style=&quot;width:425px;text-align:left&quot; id=&quot;__ss_1009857&quot;&gt;&lt;object style=&quot;margin:0px&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slideshare.net/swf/ssplayer2.swf?doc=relaxing-with-couchdb-acts-as-conference-final-1234224419527061-2&amp;rel=0&amp;stripped_title=relaxing-with-couchdb&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed src=&quot;http://static.slideshare.net/swf/ssplayer2.swf?doc=relaxing-with-couchdb-acts-as-conference-final-1234224419527061-2&amp;rel=0&amp;stripped_title=relaxing-with-couchdb&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;p&gt;Thanks again to everyone who made this a fantastic conference.&lt;/p&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Update (2/13):&lt;/strong&gt; Confreaks just posted &lt;a href=&quot;http://aac2009.confreaks.com/&quot;&gt;all the videos&lt;/a&gt; for acts_as_conference. There were a lot of great talks so be sure to check them out. The &lt;a href=&quot;http://aac2009.confreaks.com/07-feb-2009-16-00-relaxing-with-couchdb-will-leinweber.html&quot;&gt;full page for my talk&lt;/a&gt; has links for ridiculously high quality versions.&lt;/p&gt;
&lt;p&gt;&lt;embed src='http://aac2009.confreaks.com/player.swf' height='380' width='640' allowscriptaccess='always' allowfullscreen='true' flashvars='file=http%3A%2F%2Faac2009.confreaks.com%2Fvideos%2F07-feb-2009-16-00-relaxing-with-couchdb-will-leinweber-small.mp4&amp;image=images%2F07-feb-2009-16-00-relaxing-with-couchdb-will-leinweber-preview.jpg&amp;plugins=viral-1'/&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Profiling RSpec</title>
   <link href="http://tom.preston-werner.com/2009/02/01/profiling-rspec.html"/>
   <updated>2009-02-01T00:00:00-06:00</updated>
   <id>http://tom.preston-werner.com/2009/02/01/profiling-rspec</id>
   <content type="html">&lt;p&gt;If you have anything approaching a large test suite, the time spent running them becomes an important factor. The longer they take, the less often I tend to run them, which is bad. And I&amp;#8217;m probably not alone in that. Ideally you&amp;#8217;d be refactoring all your tests, removing duplication and such. If you&amp;#8217;re just interested in speeding things up, though it&amp;#8217;d be nice to know where the slow specs are.&lt;/p&gt;
&lt;p&gt;RSpec ships with a profile formatter that, but it leaves a lot to be desired. It only reports the top 10 slowest examples, and with several thousand specs, the top ten just isn&amp;#8217;t enough. It also doesn&amp;#8217;t provide any sort of statistics which are nice to track over time, say on the CI box. So let&amp;#8217;s improve this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/stopwatch.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;RSpec Formatters&lt;/h3&gt;
&lt;p&gt;Just run &lt;code&gt;spec&lt;/code&gt; by itself, and you&amp;#8217;ll see there are about a half dozen formatters. Let&amp;#8217;s take a closer look at the &lt;a href=&quot;http://github.com/dchelimsky/rspec/blob/738d9245c3ff68add2218294e3eb46951a18f245/lib/spec/runner/formatter/profile_formatter.rb&quot;&gt;existing profile formatter&lt;/a&gt;. It records the time taken for each example and then prints the top ten in &lt;code&gt;#start_dump&lt;/code&gt;. The recording part is fine, we just need to do a little more work in that dump method there.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_dump&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;

   &lt;span class=&quot;vi&quot;&gt;@example_times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@example_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@example_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;stddev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standard_deviation&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@example_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reject!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stddev&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Top &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@example_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; slowest examples:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

   &lt;span class=&quot;vi&quot;&gt;@example_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
     &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%.7f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Stats&amp;quot;&lt;/span&gt;

   &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mean:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%.5f&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;StdDev:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%.5f&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stddev&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Total:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Slow:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@example_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

   &lt;span class=&quot;vi&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;So what&amp;#8217;s going on here? It&amp;#8217;s not too much different than the built in one, except we compute the standard deviation and mean of the set of times and use them grab all of the slow specs. This of course assumes that you already have &lt;code&gt;#standard_deviation&lt;/code&gt; and &lt;code&gt;#mean&lt;/code&gt; on &lt;code&gt;Array&lt;/code&gt;. If you don&amp;#8217;t or don&amp;#8217;t feel comfortable adding those to the class, they can just as easily be methods in this module.&lt;/p&gt;
&lt;p&gt;Once we have those, we keep the ones that are 2 deviations from the mean. The choice of two is arbitrary, but I found this gave just enough to get a good look at the slow specs. Finally we print some of the stats we collected. This is great to run on the your CI box. It still checks the whole suite like &lt;code&gt;rake spec&lt;/code&gt;, but now there&amp;#8217;s the chance to record the stats and see how the tests are evolving over time.&lt;/p&gt;
&lt;h3&gt;Using the new Formatter&lt;/h3&gt;
&lt;p&gt;To get this going, we have to make a class that inherits from &lt;code&gt;Spec::Runner::Formatter::ProgressBarFormatter&lt;/code&gt;, and that file will also need to &lt;code&gt;require &quot;spec/runner/formatter/progress_bar_formatter&quot;&lt;/code&gt;. The rest is exactly the same as the built in &lt;code&gt;ProfileFormatter&lt;/code&gt;. For example, name this new formatter &lt;code&gt;RobustProfileFormatter&lt;/code&gt;, and put it in &lt;code&gt;spec/config&lt;/code&gt;. To run it once off the command looks like this: &lt;code&gt;spec -c -r spec/config/robust_profile_formatter.rb -f RobustProfileFormatter&lt;/code&gt;. The &lt;code&gt;-c&lt;/code&gt; option turns on color output, &lt;code&gt;-r&lt;/code&gt; requires the new code, and &lt;code&gt;-f&lt;/code&gt; chooses it as the formatter.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s a lot to type out, and a rake task would be much nicer. In &lt;code&gt;lib/tasks/rspec.rake&lt;/code&gt; there are a bunch of tasks. Inside the &lt;code&gt;spec&lt;/code&gt; namespace is a good place to put our new task:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Profile specs&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SpecTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;s2&quot;&gt;&amp;quot;-r spec/config/robust_profile_formatter.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;s2&quot;&gt;&amp;quot;-f RobustProfileFormatter&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;spec/**/*/*_spec.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;That&amp;#8217;s all there is to it, go and speed up your specs!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://flickr.com/photos/teamperks/2110119064/&quot;&gt;Stopwatch image&lt;/a&gt; from flickr&lt;/em&gt;&lt;/p&gt;



</content>
 </entry>
 
 <entry>
   <title>Why You Should Use CouchDB</title>
   <link href="http://tom.preston-werner.com/2008/11/16/why-you-should-use-couchdb.html"/>
   <updated>2008-11-16T00:00:00-06:00</updated>
   <id>http://tom.preston-werner.com/2008/11/16/why-you-should-use-couchdb</id>
   <content type="html">&lt;h3&gt;New Approach to an Old Problem&lt;/h3&gt;
&lt;p&gt;Your applications need to store and retrieve data. That&amp;#8217;s nothing new.  &lt;a href=&quot;http://incubator.apache.org/couchdb/&quot;&gt;CouchDB&lt;/a&gt;, and other document databases like Amazon SimpleDB, are new to the game however. Okay, I&amp;#8217;ll admit the general concept is some &lt;a href=&quot;http://en.wikipedia.org/wiki/IBM_Lotus_Notes&quot;&gt;20 years old&lt;/a&gt;, but it&amp;#8217;s safe to say that they&amp;#8217;ve recently started to gain popularity over the last year or so.&lt;/p&gt;
&lt;div class=&quot;image left&quot;&gt;&lt;img src=&quot;/images/couchdb.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Learning a document database is worthwhile, even if you don&amp;#8217;t end up using it for anything serious in the near future. You&amp;#8217;ll gain new insights on how to solve your current problems. Don&amp;#8217;t take my word for it, there&amp;#8217;s that line everyone quotes from The Pragmatic Programmer: &lt;em&gt;Learn at least one new database paradigm a year&lt;/em&gt;, or something like that.&lt;/p&gt;
&lt;p&gt;What exactly makes CouchDB so great? Read on.&lt;/p&gt;
&lt;h3&gt;Stable and Scalable&lt;/h3&gt;
&lt;p&gt;When you update a document in CouchDB, it doesn&amp;#8217;t go in and change the existing document. Instead, it just adds a new version. The upshot is that your data is never in a bad state, so even in the case of a power failure, you&amp;#8217;re not going to lose data or spend time verifying against corruption when you start up again. All these extra versions are deleted when you compact the database, so there isn&amp;#8217;t much of a storage penalty because of it.&lt;/p&gt;
&lt;div class=&quot;image right&quot;&gt;
&lt;a href=&quot;http://leinweber.us/post/58513962/we-need-more-erlangs&quot;&gt;
&lt;img src=&quot;/images/erlangs.png&quot; /&gt;&lt;br /&gt;
&lt;span class=&quot;alt&quot;&gt;Other databases have low erlangs&lt;/span&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s written in Erlang, and benefits from the stability and concurrency of the language its design idioms. Also, unlike current relational databases that try and make a single query as fast as possible, CouchDB tries to maintain consistent performance as the number of queries grows.&lt;/p&gt;
&lt;p&gt;Another big plus is that it doesn&amp;#8217;t have a custom binary protocol. It uses regular &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;. This means you can use existing http infrastructure tools such as load balancers and clustering proxies. Better still, it&amp;#8217;s RESTful, so you interact with it using the &lt;span class=&quot;caps&quot;&gt;CRUD&lt;/span&gt; operations we&amp;#8217;ve come to know and love.&lt;/p&gt;
&lt;p&gt;The way you query data from CouchDB is through views which are written using the map/reduce approach. These views themselves are indexed, so they&amp;#8217;re very fast as long as you keep the indices fresh. While it&amp;#8217;s not an option now, it&amp;#8217;s possible that in the future the mapping step could be distributed amongst several nodes which could make it ridiculously fast.&lt;/p&gt;
&lt;h3&gt;Deep Structures, No Schemas&lt;/h3&gt;
&lt;p&gt;Data has it&amp;#8217;s own natural shape, and I know I&amp;#8217;m not the only one who is sick and tired of fighting that fact. It is often an uphill battle cramming models into relational records. Your data is more complex than a few simple strings, numbers, and boolean values. You have lists, you have hashes, and even small variations between instances of the same object. This is unacceptable in the relational world.&lt;/p&gt;
&lt;p&gt;ORMs like ActiveRecord and DataMapper have done a lot to to ease the pain and abstract away the nastiness of &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt;. It&amp;#8217;s not enough though. It&amp;#8217;s like treating the symptoms and not the underlying condition. You still have to worry about joins, normalization, and other artifacts from relational databases. These issues leak their way up into your models where they don&amp;#8217;t belong, and obscure more important logic.&lt;/p&gt;
&lt;p&gt;All of this isn&amp;#8217;t an issue with CouchDB, and that&amp;#8217;s the biggest selling point for me. The fields in your documents can be hashes, they can be arrays, they can be arrays of hashes. Anything that can be serialized to &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;. It&amp;#8217;s about documents &amp;mdash; not records.&lt;/p&gt;
&lt;p&gt;As a quick example, rather than having to create an assets table for uploads, you can store all the metadata in a single field. That field can live right on the object that is responsible for it, where it belongs. Or you could store all the comments for a blog post inline with the post itself. There&amp;#8217;s a good article comparing &lt;a href=&quot;http://www.cmlenz.net/archives/2007/10/couchdb-joins&quot;&gt;inline vs. separate storage&lt;/a&gt; that is worth a read.&lt;/p&gt;
&lt;h3&gt;Downsides&lt;/h3&gt;
&lt;p&gt;Nothing is without drawbacks, and CouchDB is no exception. For one, it&amp;#8217;s still alpha. That&amp;#8217;s not to say it&amp;#8217;s buggy and unusable &amp;mdash; far from it &amp;mdash; but there are likely to be changes before they hit 1.0. I can&amp;#8217;t say to what extent this will be an issue, but you should be aware of that.&lt;/p&gt;
&lt;p&gt;There is no security model. This turns out to not be &lt;em&gt;that&lt;/em&gt; big of a deal, but it&amp;#8217;s far from ideal. You can lock down the port it runs on to only talk to localhost, which I think happens by default.&lt;/p&gt;
&lt;p&gt;The first time you run a view it will be slow. It has to go through every document and build the index. After that though, it only has to go through the new or changed documents and is significantly faster. You can make sure your views are fresh by running them after every couple hundred updates or every 10 minutes or so. But if you&amp;#8217;re always running unique views, CouchDB probably isn&amp;#8217;t a good choice.&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Go ahead and compile CouchDB from the svn head rather than going for the last release. You can find instructions over on &lt;a href=&quot;http://wiki.apache.org/couchdb/Installation&quot;&gt;their wiki&lt;/a&gt;. You&amp;#8217;ll also want a persistence layer. So far, I&amp;#8217;ve been most impressed with &lt;a href=&quot;http://github.com/langalex/couch_potato/tree/master&quot;&gt;Couch Potato&lt;/a&gt;. I&amp;#8217;ve been using it with Merb, which has been great. You just need to add it to your &lt;code&gt;config/dependencies.rb&lt;/code&gt; like this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;langalex-couch_potato&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:require_as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;couch_potato&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;then add this to your &lt;code&gt;config/init.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Merb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BootLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before_app_loads&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CouchPotato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;appname_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Merb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;json/pure&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;You might not need that &lt;code&gt;json/pure&lt;/code&gt; fix. I was having some problem where &lt;code&gt;#to_json&lt;/code&gt; was declared multiple times. It&amp;#8217;d be nice if there was a merb_couchpotato gem so you could just say &lt;code&gt;use_orm :couchpotato&lt;/code&gt;, and maybe use database.yml instead, but it&amp;#8217;s not really necessary yet.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s really all it takes. Go checkout the readme for Couch Potato and its &lt;a href=&quot;http://upstream-berlin.com/2008/10/27/couch-potato-unleashed-a-couchdb-persistence-layer-in-ruby/&quot;&gt;introduction post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Time to relax.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Faking "or shift left"</title>
   <link href="http://tom.preston-werner.com/2008/09/04/faking-or-shift-left.html"/>
   <updated>2008-09-04T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2008/09/04/faking-or-shift-left</id>
   <content type="html">&lt;p&gt;I've often been annoyed at the lack of &lt;code&gt;||&amp;lt;&amp;lt;&lt;/code&gt; after being spoiled with &lt;code&gt;||=&lt;/code&gt; for so long. The workaround I've typically used is to go ahead and use &lt;code&gt;||= [ ]&lt;/code&gt; to make sure I have an empty array. That's ugly though. You're dropping down a level and writing the &quot;how&quot; instead of the &quot;why&quot;.&lt;/p&gt;

&lt;p&gt;Today some code &lt;a href=http://blog.jayfields.com/2008/09/ruby-recording-method-calls-and.html&gt;Jay Fields posted&lt;/a&gt; had the answer I've been looking for. It's not quite as elegant as having the operator itself, but it does the job of tucking away the ugly detail of ensuring you have an empty array to shift on.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_stack&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@method_stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;method_stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We're still using &lt;code&gt;||= [ ]&lt;/code&gt; but it is hidden away in its own spot, which I find to be much cleaner.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Test Driving a File Parser</title>
   <link href="http://tom.preston-werner.com/2008/04/12/test-driving-file-parsers.html"/>
   <updated>2008-04-12T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2008/04/12/test-driving-file-parsers</id>
   <content type="html">&lt;p&gt;
My current project involves pulling gene names and group data from a tab separated file, then coloring those genes on a pathway diagram. Just like any other part of an application, the parser should be well tested. But how exactly should you go about testing all the different edge cases that the parser will see?
&lt;/p&gt;




&lt;p&gt;
One method I've worked with was to have several sample files in the fixtures directory and load them. I don't really like this, for much the same reason I don't like fixtures. It's too easy for fixtures to deteriorate into a large, unmaintainable mess. But more importantly, I can't see the whole test on one screen. Parts are hidden across several files, all of which you have to read before you can understand the test.
&lt;/p&gt;




&lt;p&gt;
&lt;a href=&quot;/images/pathway.gif&quot;&gt;&lt;img src=&quot;/images/pathway.th.png&quot; style=&quot;margin-right: 10em;&quot;&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;p&gt;
I've come up with a simple way to solve this problem. The test files should be created in the test. Now this is for tab separated files, but it could easily be changed to create csv files, or both.
&lt;/p&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;should skip empty lines and extra columns&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gene 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;group 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;only the first two columns count&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gene 2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;group 1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_test_file&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gene 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;group 1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gene 2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;group 1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;p&gt;
(I actually have the empty lines test separate from the extra columns test, I just wanted to put them together for this post.)
&lt;/p&gt;




&lt;p&gt;
#to_test_file is a method on Array, and it will create a file in the tmp decretory, then return the file name. Right now it can optionally take a specific file name. I've never had reason to use that, so I'll probably remove that bit of complexity.
&lt;/p&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_test_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test_file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tmp/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;tmp/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;p&gt;
Stick that in spec_helper or test_helper.
&lt;/p&gt;




&lt;p&gt;
Originally I had it on String, and put in all of the \t and \n myself. That was an unreadable mess. With Array you get the column and line separation implicitly.
&lt;/p&gt;


&lt;p&gt;This doesn't help at all for very large or complicated files. But for small, simple files, this is one of the easiest ways for testing the parser and keeping everything all in one place.
&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reopening NilClass</title>
   <link href="http://tom.preston-werner.com/2008/04/03/reopening-nil.html"/>
   <updated>2008-04-03T00:00:00-05:00</updated>
   <id>http://tom.preston-werner.com/2008/04/03/reopening-nil</id>
   <content type="html">&lt;p&gt;I just read a post advocating &lt;a href=&quot;http://blog.rubyenrails.nl/articles/2008/02/29/our-daily-method-18-nilclass-method_missing&quot;&gt;changing NilClass#method_missing to always return nil&lt;/a&gt;. Their argument is that you no longer have to check if you actually have something before calling methods on it like:&lt;/p&gt;
&lt;p&gt;@sun &amp;amp;&amp;amp; @sun.still_burning?&lt;/p&gt;
&lt;p&gt;Instead, you could just call @sun.still_burning?, which is nice. I usually just check &lt;a href=&quot;isTheSunStillBurning.com&quot;&gt;isthesunstillburning.com&lt;/a&gt; 20 times a day to make sure, but you get the point. &lt;em&gt;&lt;strong&gt;Edit:&lt;/strong&gt; it looks like this site is no longer up, and now I get worried at night, when I can&amp;#8217;t tell&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://farm1.static.flickr.com/77/158529397_d0e4a4cfb0.jpg&quot; style=&quot;margin-right: 10em&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, it&amp;#8217;s a very attractive, very short solution to an every day annoyance &amp;#8212; that alone is enough to make me worry. Overriding #method_missing on NilClass just seems &lt;em&gt;wrong_.  The better solution is to define Null Objects for all of your classes, and have those returned instead of nothing. Yeah, it&amp;#8217;s more work than the method&lt;/em&gt;missing solution, but it&amp;#8217;s a lot safer and doesn&amp;#8217;t leave such a bad taste in my mouth.&lt;/p&gt;
&lt;h3&gt;I do actually reopen NilClass though&lt;/h3&gt;
&lt;p&gt;Often, actually. Working with rspec and making typos can be very frustrating otherwise. If do @sum.should_recieve(:set) instead of @sun, then you&amp;#8217;ll get&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;Mock&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;some mock&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;received&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unexpected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tyop?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# or&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Mock&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;NilClass&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:list_pathways&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hsa&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;received&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;The second one is easy to realize you have a typo, sure. But I know I&amp;#8217;ve wasted time wondering why the expectation failed, and I&amp;#8217;m sure you have too. By adding a few methods to NilClass, this is no longer an issue:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NilClass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;WARNING: you tried to add expectations to nil!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stub!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:should_receive&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Now we get: &lt;code&gt;WARNING: you tried to add expectations to nil!&lt;/code&gt; and even a line number to where the typo is.&lt;/p&gt;
&lt;p&gt;When else have you found it okay to mess around with NilClass? I&amp;#8217;m sure there are a few other occasions where it makes sense.&lt;/p&gt;
&lt;p&gt;Sun picture from &lt;a href=&quot;http://flickr.com/photos/rogersmith/61126609/&quot;&gt;rodger smith, flickr&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Merb and Datamapper</title>
   <link href="http://tom.preston-werner.com/2008/01/20/merb-and-datamapper.html"/>
   <updated>2008-01-20T00:00:00-06:00</updated>
   <id>http://tom.preston-werner.com/2008/01/20/merb-and-datamapper</id>
   <content type="html">&lt;p&gt;With the recent release of &lt;a href=&quot;http://merbivore.com&quot;&gt;Merb 0.5&lt;/a&gt;, I've decided to use it along with &lt;a href=&quot;http://datamapper.org&quot;&gt;datamapper&lt;/a&gt; for one of my new projects. It isn't different enough to be completely foreign, but enough to be a refreshing change. I haven't done a whole lot with either yet, but I have had a patch accepted, ran into a huge, annoying problem with autotest, and found out how to watch the SQL datamaper is generating.&lt;/p&gt;

&lt;h2&gt;stats patch&lt;/h2&gt;

&lt;p&gt;While I was in #merb earlier today, &lt;a href=&quot;http://hassox.blogspot.com/&quot;&gt;hassox&lt;/a&gt; posted some &lt;a href=&quot;http://pastie.caboo.se/136989&quot;&gt;current benchmarks&lt;/a&gt;. Being somewhat a stickler for statistics, I had to point out that means alone were meaningless. Not to get into all of the boring details, two distributions can have the same mean, but be completely different. Here is an image I made in Mathematica and sktich to show why:
&lt;a href=&quot;http://skitch.com/leinweber/fydc/normal-distribution&quot;&gt;&lt;img src=&quot;http://img.skitch.com/20080120-tscppcbjptm64suuupkr63bsqe.preview.jpg&quot; alt=&quot;normal distribution&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They all have the same mean, but a random pick from the distribution with the smaller variance of 0.5 is more likely to be actually be near the mean than with either of the ones with higher variances. If you apply this to load times, two severs could serve pages just as quickly on average. However, the one with the higher variance is going to seem a lot slower, since there are more slow points in the set.&lt;/p&gt;

&lt;p&gt;I submitted a &lt;a href=&quot;http://merb.devjavu.com/ticket/460&quot;&gt;patch&lt;/a&gt; to add the standard deviations to each of the tests and &lt;a href=&quot;http://pastie.caboo.se/139496&quot;&gt;clean up the output a bit&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;AutoTest problem&lt;/h2&gt;

&lt;p&gt;I was trying to get autotest up and running but kept running into this problem:&lt;/p&gt;

&lt;p&gt;  /Library/Ruby/Site/1.8/rubygems/custom_require.rb:27:in &lt;code&gt;gem_original_require':
  no such file to load -- rspec_autotest (LoadError)
  from /Library/Ruby/Site/1.8/rubygems/custom_require.rb:27:in&lt;/code&gt;require'
  from /Library/Ruby/Gems/1.8/gems/zentest-3.5.0/bin/autotest:35
  from /usr/bin/autotest:19:in `load'
  from /usr/bin/autotest:19&lt;/p&gt;

&lt;p&gt;After futilely searching for the problem for a long time, and asking in #merb where someone else was having the same problem, I was about to give up and just run my tests by hand (oh no!). I decided to check the versions of all my gems, and it turned out that zentest was only 3.5.0 when the latest was 3.7.2. I thought that was odd, because I just installed the gem that night. Odder still, updating the gem did nothing to increase the version. It turns out there is zentest and there is ZenTest&lt;/p&gt;

&lt;p&gt;  $ gem list -r | grep -i zentest
  zentest (3.5.0)
  ZenTest (3.7.2, 3.7.1, 3.7.0, 3.6.1, 3.6.0, 3.5.2, 3.5.1, 3.4.3, 3.4.2, 3.4.1, 3.4.0, 3.3.0, 3.2.0, 3.1.0, 3.0.0)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;edit&lt;/strong&gt;: As of Jan 20, 2008 this seems to be fixed, and there is only ZenTest&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Uninstalling zentest and installing ZenTest fixed the problem.&lt;/p&gt;

&lt;h2&gt;Watching Datamapper's SQL&lt;/h2&gt;

&lt;p&gt;This is very easy to do. Just edit your config/database.yml file to include&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;ss&quot;&gt;:log_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:log_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;and you can see the SQL in your merb process.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>