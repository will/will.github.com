--- 
title:      Profiling RSpec
created_at: 2009-01-31 01:52:57.078295 -06:00
blog_post:  true
layout: post
filter:
  - erb
  - textile
--- 

If you have anything approaching a large test suite, the time spent running them becomes an important factor. The longer they take, the less often I tend to run them, which is bad. And I'm probably not alone in that. Ideally you'd be refactoring all your tests, removing duplication and such. If you're just interested in speeding things up, though it'd be nice to know where the slow specs are.

RSpec ships with a profile formatter that, but it leaves a lot to be desired. It only reports the top 10 slowest examples, and with several thousand specs, the top ten just isn't enough. It also doesn't provide any sort of statistics which are nice to track over time, say on the CI box. So let's improve this.

!http://farm1.static.flickr.com/195/504212595_56388484f9.jpg!

h3. RSpec Formatter

Just run @spec@ by itself, and you'll see there are about a half dozen formatters. Let's take a closer look at the "existing profile formatter":formatter. It records the time taken for each example and then prints the top ten in @#start_dump@. The recording part is fine, we just need to do a little more work in that dump method there.

<%- coderay(:lang => :ruby) do -%>
def start_dump
   super
   
   @example_times = @example_times.sort_by do |description, example, time|
     time
   end.reverse
   
   times = @example_times.map {|d,e,t| t}
   mean = times.mean
   stddev = times.standard_deviation
   k = 2
   @example_times.reject! { |d,e,t| t < mean + k * stddev }
   
   @output.puts "\n\nTop #{@example_times.size} slowest examples:\n"
   
   @example_times.each do |description, example, time|
     @output.print red(sprintf("%.7f", time))
     @output.puts "\t#{description} #{example}"
   end
   
   @output.puts "\n\nStats"
   
   @output.puts "Mean:\t#{"%.5f" % mean}"
   @output.puts "StdDev:\t#{"%.5f" % stddev}"
   @output.puts "Total:\t#{times.size}"
   @output.puts "Slow:\t#{@example_times.size}"
   
   @output.flush
 end
<%- end -%>

So what's going on here? It's not too much different than the built in one, except we compute the standard deviation and mean for all of the times. This of course assumes that you already have @#standard_deviation@ and @#mean@ on @Array@. If you don't or don't feel comfortable adding those to the class, they can just as easily be methods in this module. Once we have those, we keep the ones that are 2 standard deviations from the mean. The choice of two is arbitrary, but I found this gave just enough to get a good look at the slow specs. Finally we print some of the stats we collected. This is great to have your CI box run and record the stats.

h3. Using

How to run it. You do it like this?. @spec -c -o -f spec@

[moses]http://www.moseshohman.com/blog/2008/07/06/too-many-mock-objects-ruby-refactoring-death/
[stopwatch]http://farm1.static.flickr.com/195/504212595_56388484f9.jpg
[another stopwatch]http://farm3.static.flickr.com/2408/2110119064_39a6054077.jpg
[flickr]http://flickr.com/photos/ytwhitelight/504212595/sizes/m/
[formatter]http://github.com/dchelimsky/rspec/blob/738d9245c3ff68add2218294e3eb46951a18f245/lib/spec/runner/formatter/profile_formatter.rb
