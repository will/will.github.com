--- 
title:      Why You Should Use CouchDB
created_at: 2008-11-15 12:00:00 -06:00
blog_post:  true
layout: post
filter:
  - textile
---

h3. It's a new approach to an old problem

Your applications need to store and retrieve data. That's nothing new.  "CouchDB":http://incubator.apache.org/couchdb/, and other document databases like Amazon SimpleDB, are new however. Okay, I'll admit the concept of a document database is some "20 years old":http://en.wikipedia.org/wiki/IBM_Lotus_Notes, but it's safe to say that they've just started to gain popularity over the last year or so.

Learning a document database is worthwhile, even if you don't end up using it for anything serious in the near future. You'll gain new insights on how to solve your current problems. Don't take my word for it, there's that line everyone quotes from The Pragmatic Programmer: _Learn at least one new database paradigm a year_, or something like that.

What exactly makes it so great? Read on.

h3. Stable and scalable

When you update a document in CouchDB it doesn't go in and change the existing document. Instead, it just adds a new version. The upshot is that your data is never in a bad state, so even in a power failure you're not going to lose data or spend time verifying when you start up again. All these extra versions are deleted when you compact the database, so there isn't much of a storage penalty because of it.

It's written in Erlang, and gets the stability and concurrency from both the language its design idioms. Unlike current relational databases that try and make a single query as fast as possible, CouchDB emphasizes not losing performance as the number of concurrent queries grows. 

Another big plus is that it doesn't have some custom binary protocol. It uses HTTP. This means you can use existing http infrastructure like load balancers and clustering proxies. Better still, it's RESTful, so you interact with it using the CRUD operations we've come to know and love.

The way you query data from CouchDB is through views which are written using map/reduce. These views themselves are indexed, so they're very fast as long as you keep the indices fresh. While it's not an option now, it's possible that in the future the mapping step could be distributed amongst several nodes to improve performance. 

h3. Deep structures, no schemas

Data has it's own natural shape, and I know I'm not the only one who is sick and tired of fighting that fact. Stuffing   that fact and stuffing that into 
This is the biggest selling point for me. Fields in each document can take values you'd expect like strings, numbers, and boolean. 
It's about documents; not records.
ORMs like ActiveRecord and DataMapper have done a lot to to ease the pain, but it's like treating the symptoms and not the underlying condition.

You don't need ORMs, you don't need to split your 

a lot of the data we use today isn't relational, it's not rectangular

You can even attach binary files to a document 

h3. Downsides

It's still alpha. That's not to say it's buggy and unusable &mdash; far from it &mdash; but there are likely to be changes before they hit 1.0.

There is no security model. This turns out to not be _that_ big of a deal, but it's far from ideal. You can lock down the port it runs on to only talk to localhost, (which I think happens by default)

*Next up:* I'll show you how to get started with Merb and CouchDB. In the meantime I welcome you to install CouchDB and start playing with it.

